<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'validator.builder' shared service.

$this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

$instance->setConstraintValidatorFactory(new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(['Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => function () {
    return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->load('getDoctrine_Orm_Validator_UniqueService.php')) && false ?: '_'};
}, 'PrestaShopBundle\\Form\\Validator\\Constraints\\TinyMceMaxLengthValidator' => function () {
    return ${($_ = isset($this->services['prestashop.bundle.form.validator.constraints.tiny_mce_max_length_validator']) ? $this->services['prestashop.bundle.form.validator.constraints.tiny_mce_max_length_validator'] : $this->load('getPrestashop_Bundle_Form_Validator_Constraints_TinyMceMaxLengthValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\Module\\FacetedSearch\\Constraint\\UrlSegmentValidator' => function () {
    return ${($_ = isset($this->services['prestashop.module.ps_facetedsearch.constraint.url_segment_validator']) ? $this->services['prestashop.module.ps_facetedsearch.constraint.url_segment_validator'] : $this->load('getPrestashop_Module_PsFacetedsearch_Constraint_UrlSegmentValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\AddressDniRequiredValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.address_country_dni_validator']) ? $this->services['prestashop.core.constraint_validator.address_country_dni_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_AddressCountryDniValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\AddressStateRequiredValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.address_country_state_validator']) ? $this->services['prestashop.core.constraint_validator.address_country_state_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_AddressCountryStateValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\AddressZipCodeValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.address_zip_code_validator']) ? $this->services['prestashop.core.constraint_validator.address_zip_code_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_AddressZipCodeValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\CleanHtmlValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.clean_html_validator']) ? $this->services['prestashop.core.constraint_validator.clean_html_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_CleanHtmlValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\CustomerNameValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.customer_name_validator']) ? $this->services['prestashop.core.constraint_validator.customer_name_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_CustomerNameValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\DefaultLanguageValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.default_language_validator']) ? $this->services['prestashop.core.constraint_validator.default_language_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_DefaultLanguageValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\ExistingCustomerEmailValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.existing_customer_email_validator']) ? $this->services['prestashop.core.constraint_validator.existing_customer_email_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_ExistingCustomerEmailValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\IsUrlRewriteValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.is_url_rewrite_validator']) ? $this->services['prestashop.core.constraint_validator.is_url_rewrite_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_IsUrlRewriteValidatorService.php')) && false ?: '_'};
}, 'PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\TypedRegexValidator' => function () {
    return ${($_ = isset($this->services['prestashop.core.constraint_validator.typed_regex_validator']) ? $this->services['prestashop.core.constraint_validator.typed_regex_validator'] : $this->load('getPrestashop_Core_ConstraintValidator_TypedRegexValidatorService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => function () {
    return ${($_ = isset($this->services['security.validator.user_password']) ? $this->services['security.validator.user_password'] : $this->load('getSecurity_Validator_UserPasswordService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => function () {
    return ${($_ = isset($this->services['validator.email']) ? $this->services['validator.email'] : ($this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false))) && false ?: '_'};
}, 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => function () {
    return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : ($this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator())) && false ?: '_'};
}, 'doctrine.orm.validator.unique' => function () {
    return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->load('getDoctrine_Orm_Validator_UniqueService.php')) && false ?: '_'};
}, 'security.validator.user_password' => function () {
    return ${($_ = isset($this->services['security.validator.user_password']) ? $this->services['security.validator.user_password'] : $this->load('getSecurity_Validator_UserPasswordService.php')) && false ?: '_'};
}, 'validator.expression' => function () {
    return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : ($this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator())) && false ?: '_'};
}])));
$instance->setTranslator(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->getTranslator_DefaultService()) && false ?: '_'});
$instance->setTranslationDomain('validators');
$instance->addXmlMappings([0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/config/validation.xml')]);
$instance->enableAnnotationMapping(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->getAnnotationReaderService()) && false ?: '_'});
$instance->addMethodMapping('loadValidatorMetadata');
$instance->setMetadataCache(new \Symfony\Component\Validator\Mapping\Cache\Psr6Cache(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($this->targetDirs[0].'/validation.php'), ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->load('getCache_ValidatorService.php')) && false ?: '_'})));
$instance->addObjectInitializers([0 => ${($_ = isset($this->services['doctrine.orm.validator_initializer']) ? $this->services['doctrine.orm.validator_initializer'] : $this->load('getDoctrine_Orm_ValidatorInitializerService.php')) && false ?: '_'}]);

return $instance;
